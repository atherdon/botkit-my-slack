'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = repos;

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _async = require('async');

var _async2 = _interopRequireDefault(_async);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var json = true;

function head(token) {
  var headers = {
    'User-Agent': 'Bugbot',
    'Authorization': 'token ' + token,
    'Accept': 'application/json'
  };
  return headers;
}

function getOrgs(token, callback) {
  var uri = 'https://api.github.com/user/orgs';
  var headers = head(token);
  _request2.default.get({ uri: uri, headers: headers, json: json }, function (err, res) {
    var orgs = res.body;
    if (orgs.message === 'Bad credentials') {
      callback(orgs.message);
    } else {
      callback(err, orgs.map(function (o) {
        return o.repos_url;
      }));
    }
  });
}

function getRepos(token, uri, callback) {
  var headers = head(token);
  _request2.default.get({ uri: uri, headers: headers, json: json }, function (err, res) {
    if (err) {
      callback(err);
    } else {
      callback(null, res.body.map(function (r) {
        return r.full_name;
      }));
    }
  });
}

function getAllOrgRepos(token, callback) {
  var headers = head(token);
  var i = function i(repo, cb) {
    return getRepos(token, repo, cb);
  };
  getOrgs(token, function (err, repos) {
    _async2.default.map(repos, i, function (err, unflat) {
      callback(err, _lodash2.default.flatten(unflat));
    });
  });
}

function getUserRepos(affiliation, visibility, token, callback) {
  var uri = 'https://api.github.com/user/repos';
  var json = true;
  var qs = { affiliation: affiliation, visibility: visibility };
  // FIXME need to generalize User-Agent
  var headers = {
    'User-Agent': 'Bugbot',
    'Authorization': 'token ' + token,
    'Accept': 'application/json'
  };
  _request2.default.get({ uri: uri, qs: qs, headers: headers, json: json }, function (err, res) {
    var repos = res.body;
    if (repos.message === 'Bad credentials') {
      callback(repos.message);
    } else {
      callback(err, repos.map(function (r) {
        return r.full_name;
      }));
    }
  });
}

function getAllUserRepos(token, callback) {
  var a = function a(cb) {
    return getUserRepos('collaborator', 'private', token, cb);
  };
  var b = function b(cb) {
    return getUserRepos('organization_member', 'private', token, cb);
  };
  var c = function c(cb) {
    return getUserRepos('owner', 'private', token, cb);
  };
  var a1 = function a1(cb) {
    return getUserRepos('collaborator', 'public', token, cb);
  };
  var b1 = function b1(cb) {
    return getUserRepos('organization_member', 'public', token, cb);
  };
  var c1 = function c1(cb) {
    return getUserRepos('owner', 'public', token, cb);
  };
  _async2.default.parallel([a, b, c, a1, b1, c1], function (err, data) {
    callback(err, _lodash2.default.flatten(data));
  });
}

function repos(token, callback) {
  var u = function u(cb) {
    return getAllUserRepos(token, cb);
  };
  var r = function r(cb) {
    return getAllOrgRepos(token, cb);
  };
  _async2.default.parallel([u, r], function (err, data) {
    callback(err, _lodash2.default.flatten(data).sort());
  });
}